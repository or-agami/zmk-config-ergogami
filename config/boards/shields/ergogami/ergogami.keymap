/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>



&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };
 
/* Layers */
#define QWERTY 0
#define ISRT 1
#define AL2 2
#define AL2U 8
#define SM1 3
#define SM2 4	
#define NM1 5	
#define SYS 6
#define BT 7	
/ { 
    combos {
        compatible = "zmk,combos";
        combo_game {
            timeout-ms = <30>;
	    key-positions = <0 1 2 3>;
            bindings = <&to QWERTY>;
        };
        combo_sys {
            timeout-ms = <30>;
	    key-positions = <4 5 6>;
            bindings = <&to SYS>;
        };
        combo_caps {
            timeout-ms = <30>;
	    key-positions = <16 17 18>;
            bindings = <&caps_word>;
        };
        combo_bt  {
            timeout-ms = <10>;
            key-positions = <13 14>;
            bindings = <&to BT>;
	    layers = <SM1>; 
        };
        lalt {
            timeout-ms = <20>;
	    key-positions = <10 11>;
            bindings = <&kp LALT>; 
	    layers = <SYS>; 
        };


    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        sr: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to>;
	    retro-tap;
        };
	sk: shift_key {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_KEY";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&to>;
	    retro-tap;
        };
        hl: homerow_layers {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sl>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	alpha2macro: behavior_macro_1 {
		compatible = "zmk,behavior-macro";
		label = "MACRO1";
		#binding-cells = <0>;
		bindings = < &sl AL2 >;
	};
    };
//		Keys Template
//              -------------------------------------------------------------------------------------------------------------------------
//             |  RC(0,0)   |  RC(0,1)   |  RC(0,2)   |  RC(0,3)   |  RC(0,4)   |         |  RC(0,20)  |  RC(0,19)  |  RC(0,18)  |  RC(0,17)  |  RC(0,16)  |
//             |  RC(0,5)   |  RC(0,6)   |  RC(0,7)   |  RC(0,8)   |  RC(0,9)   |         |  RC(0,25)  |  RC(0,24)  |  RC(0,23)  |  RC(0,22)  |  RC(0,21)  |
//             |  RC(0,10)  |  RC(0,11)  |  RC(0,12)  |  RC(0,13)  |  RC(0,14)  |         |  RC(0,30)  |  RC(0,29)  |  RC(0,28)  |  RC(0,27)  |  RC(0,26)  |
//                                                                 |  RC(0,15)  |         |  RC(0,31)  |
       keymap {
                compatible = "zmk,keymap";
       		qwerty {
		bindings = <
		&kp Q        &kp W        &kp E        &kp R        &kp T		   &kp Y        &kp U        &kp I        &kp O        &kp P
		&kp A        &kp S        &kp D        &sk LSHFT F  &kp G		   &kp H        &sk RSHFT J  &kp K        &kp L        &kp SEMI
		&kp Z        &kp X        &kp C        &kp V        &kp B		   &kp N        &kp M        &kp COMMA    &kp DOT      &bt BT_CLR
								    &lt NM1 SPACE	   &td RSHFT BSPC
		>;
		};
       		isrt {
//           -------------------------------------------------------------------------------------------------------------------------
//           |     Y     |     C     |     L     |     M     |     K     |       |     Z     |     F     |     U     |     ,     |     '     |
//           |     I     |     S     |     R     |     T     |     G     |       |     P     |     N     |     E     |     A     |     O     |
//           |     Q     |     V     |     W     |     D     |     J     |       |     B     |     H     |     /     |     .     |     X     |
//                                                           |   SPACE   |       |    BSPC   |
		bindings = <
		&kp Y       &kp C       &kp L       &kp M       &kp K		    &kp Z       &kp F       &kp U       &kp COMMA   &kp SQT
		&kp I       &kp S       &kp R       &kp T       &kp G		    &kp P       &kp N       &kp E       &kp A       &kp O
		&kp Q       &kp V       &kp W       &kp D       &kp J		    &kp B       &kp H       &kp FSLH    &kp DOT     &kp X
								&td LSHFT SPACE	    &td RSHFT BSPC
		>;
		};
       		alpha2 {
		bindings = <
		&trans 	 	&kp V 		&kp W		&kp M	 	 	&kp F    	&kp SQT			&kp Z 		&trans
		&kp Q	 	&kp J 		&kp P		&kp K 			&kp B 		&kp DOT			&kp X		&kp Y 
		&trans	 	&trans 		&trans 		&sk LSHIFT 		&sl AL2U	&trans			&trans		&trans
								&trans	 		&trans
		>;
		};
		
       		sym1 {
		bindings = <
		&trans 		&kp LA(N3)   	&kp LS(N3)	&kp DLLR	    	&kp LS(COMMA)	&kp LS(DOT)		&kp CARET	&trans
		&kp GRAVE	&kp TILDE 	&kp MINUS      	&kp BSLH	 	&kp LBKT	&kp RBKT	 	&kp PIPE 	&kp SLASH
		&trans		&trans  	&trans		&trans  		&trans		&trans 			&trans  	&trans
							 	&trans		 	&trans
		>;
		};
		sym2 {
		bindings = <
		&trans		&kp ATSN	&td LA(RBKT) LA(LS(RBKT))	&td  LA(LBKT) LA(LS(LBKT))	&kp LPRN	&kp RPRN 	&kp SEMI 	&trans
		&kp STAR  	&kp PRCNT	&td QMARK EXCL       		&kp DQT   			&kp LBRC  	&kp RBRC	&kp AMPS	&kp COLON 
		&trans 		&trans 		&trans  			&trans 				&trans 		&trans 		&trans 		&trans   
						 				&trans				&trans

		>;
		};

		num {
		bindings = <
		&kp Y       &kp C       &kp L       &kp M       &kp K		    &kp Z       &kp N7      &kp N8      &kp N9      &kp SQT
		&kp I       &kp S       &kp R       &kp T       &kp G		    &kp P       &kp N4      &kp N5      &kp N6      &kp O
		&kp Q       &kp V       &kp W       &kp D       &kp J		    &kp N0      &kp N1      &kp N2      &kp N3      &kp X
								&td LSHFT SPACE	    &td RSHFT BSPC
		>;
		};

		sys {
		bindings = <
		&trans		 	&kp ESC			&kp LC(LS(TAB)) 	&kp RC(TAB)		&td LG(V) LG(C) 	&kp UP 		&td Q BKSP 			&trans
		&td LG(GRAVE) TAB	&td HOME DEL		&td END LG(LBKT) 	&kp LG(RBKT)		&td TAB LEFT  		&kp DOWN 	&td  LC(LG(LS(N4))) RIGHT 	&kp RET 
		&trans 			&trans 		 	&trans			&trans	 		&kp RGUI		&trans 		&trans				&trans 	   
									 		&trans	 		&trans
		>;
		};

		bt {
		bindings = <
		&trans		&bt BT_PRV	&bt BT_NXT	&trans 			&trans 	&trans	&trans	&trans
		&bootloader  	&trans 		&trans 		&trans 			&trans 	&trans 	&trans	&bt BT_CLR
		&trans 	 	&trans 		&trans		&to ISRT		&trans  &trans  &trans 	&bt BT_CLR
						 		&trans			&trans
		>;
		};

       		alpha2cap {
		bindings = <
		&trans 	 	&kp LS(V)	&kp LS(W)	&kp LS(M) 	 	&kp LS(F)    	&trans		&kp LS(Z)	&trans 
		&kp LS(Q) 	&kp LS(J) 	&kp LS(P)	&kp LS(K)		&kp LS(B)	&kp COMMA	&kp LS(X)	&kp LS(Y) 
		&trans	 	&trans 		&trans 		&trans 			&kp LA(SEMI)	&trans		&trans		&trans
								&trans	 		&trans
		>;
		};
        
	};
};
